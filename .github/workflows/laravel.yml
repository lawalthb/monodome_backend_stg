# name: Publish Website

# on:
#   push:
#     branches:
#       - main

# jobs:
#   web-deploy:
#     name: ðŸš€ Deploy Website Every Commit
#     runs-on: ubuntu-latest
#     steps:
#       - name: ðŸšš Get Latest Code
#         uses: actions/checkout@v3

#       - name: ðŸ“‚ Install Rsync
#         run: |
#           sudo apt update

#           sudo apt install rsync
#         # This step installs rsync on the runner

#       - name: ðŸ“‚ Sync Files
#         uses: SamKirkland/web-deploy@v1
#         with:
#           target-server: "162.0.209.232"
#           remote-user: "payljenl"
#           ssh-port : 21098
#           private-ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
#           destination-path: "/home/payljenl/sso.paylodr.com/"

# name: remote ssh command
# on: [push]
# jobs:

#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     steps:
#     - name: executing remote ssh commands using password
#       uses: appleboy/ssh-action@v1.0.0
#       with:
#         host: ${{ secrets.REMOTE_HOST }}
#         username: ${{ secrets.REMOTE_USER }}
#         password: ${{ secrets.REMOTE_PASSWORD }}
#         port: ${{ secrets.REMOTE_PORT }}
#         script: |
#           cd /home/kaysolak/www/monolog.kaysolaknigventures.com/
#           # git pull
#           git fetch origin main
#           git reset --hard origin/main
#           composer install
#           php artisan migrate:fresh --seed --force
#           php artisan optimize:clear
#           php artisan route:clear
#           php artisan config:clear
#           #pwd
#           #ls -la
#           #chmod +x deploy.sh
#           #sh deploy.sh


name: remote ssh command
on: [push]
jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.MONODOM5_IP }}
        username: ${{ secrets.MONODOM5_USER }}
        password: ${{ secrets.MONODOM5_PASS }}
        # port: ${{ secrets.MONODOM5_PORT }}
        script: |
          cd /home/monodom5/api.monodome.co/

          if [ ! "$(ls -A /home/monodom5/api.monodome.co/)" ]; then
              git clone git@github.com:talosmart/monodome_backend_users.git .
            else
              git pull
              composer install
            fi

          if [ ! -f .env ]; then
              # If it doesn't exist, create .env
              # touch .env

              # Populate .env with GitHub secret content
              echo "${{ secrets.MY_ENV }}" >> .env
              php artisan migrate:fresh --seed --force
              composer update && composer dumpautoload && php artisan migrate
              # Add more secret variables as needed
            fi

          # # git pull
          # git fetch origin main
          # git reset --hard origin/main
          # composer install
          php artisan migrate:fresh --seed --force
          # php artisan optimize:clear
          # php artisan route:clear
          # php artisan config:clear
          pwd
          ls -la
          #chmod +x deploy.sh
          #sh deploy.sh

